colnames(train_df) <- c("PC1", "PC2", "Species")
colnames(test_df) <- c("PC1", "PC2", "Species")
set.seed(1234)
tree1 <- tree(Species~., data=train_df)
plot(tree1)
text(tree1, cex=0.5, pretty=0)
pred <- predict(tree1, newdata=test_df, type="class")
mean(pred==test$Species)
train_df <- data.frame(train_pc$PC1, train_pc$PC2, train$Species)
test_df <- data.frame(test_pc$PC1, test_pc$PC2, test$Species)
library(class)
set.seed(1234)
pred <- knn(train=train_df[,1:2], test=test_df[,1:2], cl=train_df[,3], k=3)
mean(pred==test$Species)
library(tree)
colnames(train_df) <- c("PC1", "PC2", "Species")
colnames(test_df) <- c("PC1", "PC2", "Species")
set.seed(1234)
tree1 <- tree(Species~., data=train_df)
plot(tree1)
text(tree1, cex=0.5, pretty=0)
pred <- predict(tree1, newdata=test_df, type="class")
mean(pred==test$Species)
train_pc <- predict(pca_out, train[, 1:4])
test_pc <- predict(pca_out, test[,])
plot(test_pc$PC1, test_pc$PC2, col=c("red","green","blue")[unclass(test_pc$Species)])
train_df <- data.frame(train_pc$PC1, train_pc$PC2, train$Species)
test_df <- data.frame(test_pc$PC1, test_pc$PC2, test$Species)
library(class)
set.seed(1234)
pred <- knn(train=train_df[,1:2], test=test_df[,1:2], cl=train_df[,3], k=3)
mean(pred==test$Species)
library(tree)
colnames(train_df) <- c("PC1", "PC2", "Species")
colnames(test_df) <- c("PC1", "PC2", "Species")
set.seed(1234)
tree1 <- tree(Species~., data=train_df)
plot(tree1)
text(tree1, cex=0.5, pretty=0)
pred <- predict(tree1, newdata=test_df, type="class")
mean(pred==test$Species)
library(caret)
library(mlbench)
df <- PimaIndiansDiabetes2[]
library(caret)
library(mlbench)
df <- data(PimaIndiansDiabetes2[])
library(caret)
library(mlbench)
df <- data(PimaIndiansDiabetes2[], package="mlbench")
library(caret)
library(mlbench)
df <- data("PimaIndiansDiabetes2"[])
library(caret)
library(mlbench)
data("PimaIndiansDiabetes2")
library(caret)
library(mlbench)
data("PimaIndiansDiabetes2")
df <- PimaIndiansDiabetes2[]
library(caret)
library(mlbench)
data("PimaIndiansDiabetes2")
df <- PimaIndiansDiabetes2[]
corMatrix <- cor(df[,1:7])
findCorrelation(corMatrix, cutoff=0.5, verbose=TRUE)
corMatrix
library(caret)
library(mlbench)
data("PimaIndiansDiabetes2")
df <- complete.cases(PimaIndiansDiabetes2[])
corMatrix <- cor(df[,1:7])
findCorrelation(corMatrix, cutoff=0.5, verbose=TRUE)
corMatrix
df
library(caret)
library(mlbench)
data("PimaIndiansDiabetes2")
df <- PimaIndiansDiabetes2[complete.cases(PimaIndiansDiabetes2[]),]
corMatrix <- cor(df[,1:7])
findCorrelation(corMatrix, cutoff=0.5, verbose=TRUE)
corMatrix
library(caret)
library(mlbench)
data("PimaIndiansDiabetes2")
df <- PimaIndiansDiabetes2[complete.cases(PimaIndiansDiabetes2[]),]
corMatrix <- cor(df[,1:7])
findCorrelation(corMatrix, cutoff=0.5, verbose=TRUE)
library(caret)
library(mlbench)
data("PimaIndiansDiabetes2")
df <- PimaIndiansDiabetes2[complete.cases(PimaIndiansDiabetes2[]),]
corMatrix <- cor(df[,1:7])
findCorrelation(corMatrix, cutoff=0.5, verbose=TRUE)
names(df)
?findCorrelation
df <- df[,-c(2,6)]
ctrl <- trainControl(method="repeatedcv", repeats=5)
model <- train(diabetes~., data=df, method="knn", preProcess="scale", trControl=ctrl)
importance <- varImp(model, scale=FALSE)
importance
ctrl <- trainControl(method="repeatedcv", repeats=5)
model <- train(diabetes~., data=df, method="knn", preProcess="scale", trControl=ctrl)
importance <- varImp(model, scale=FALSE)
importance
plot(importance)
df <- PimaIndiansDiabetes2[complete.cases(PimaIndiansDiabetes2[]),]
ctrl <- rfeControl(functions=rfFuncs, method="cv", number=10)
rfe_out <- rfe(df[,1:7], df[,8], sizes=c(1:7), rfeControl=ctrl)
rfe_out
predictors(ref_out)
predictors(rfe_out)
?train()
ctrl <- trainControl(method="repeatedcv", repeats=5)
model <- train(diabetes~., data=df, method="knn", preProcess="scale", trControl=ctrl)
importance <- varImp(model, scale=FALSE)
importance
plot(importance)
plot(importance)
library(caret)
library(mlbench)
data("PimaIndiansDiabetes2")
df <- PimaIndiansDiabetes2[complete.cases(PimaIndiansDiabetes2[]),]
corMatrix <- cor(df[,1:7])
findCorrelation(corMatrix, cutoff=0.5, verbose=TRUE)
library(caret)
library(mlbench)
data("PimaIndiansDiabetes2")
df <- PimaIndiansDiabetes2[complete.cases(PimaIndiansDiabetes2[]),]
corMatrix <- cor(df[,1:7])
findCorrelation(corMatrix, cutoff=0.5, verbose=TRUE)
df <- df[,-c(2,6)]
ctrl <- trainControl(method="repeatedcv", repeats=5)
model <- train(diabetes~., data=df, method="knn", preProcess="scale", trControl=ctrl)
importance <- varImp(model, scale=FALSE)
importance
plot(importance)
?ref()
?rfe()
library(caret)
library(mlbench)
data("PimaIndiansDiabetes2")
df <- PimaIndiansDiabetes2[complete.cases(PimaIndiansDiabetes2[]),]
corMatrix <- cor(df[,1:7])
findCorrelation(corMatrix, cutoff=0.5, verbose=TRUE)
library(FSelector)
install.packages("FSelector")
library(FSelector)
# Chunk 1
library(caret)
data(iris)
i <- sample(1:150, 100, replace=FALSE)
train <- iris[i,]
test <- iris[-i,]
set.seed(1234)
pca_out <- preProcess(train[,1:4], method=c("center", "scale", "pca"))
pca_out
# Chunk 2
train_pc <- predict(pca_out, train[, 1:4])
test_pc <- predict(pca_out, test[,])
plot(test_pc$PC1, test_pc$PC2, col=c("red","green","blue")[unclass(test_pc$Species)])
# Chunk 3
train_df <- data.frame(train_pc$PC1, train_pc$PC2, train$Species)
test_df <- data.frame(test_pc$PC1, test_pc$PC2, test$Species)
library(class)
set.seed(1234)
pred <- knn(train=train_df[,1:2], test=test_df[,1:2], cl=train_df[,3], k=3)
mean(pred==test$Species)
# Chunk 4
library(tree)
colnames(train_df) <- c("PC1", "PC2", "Species")
colnames(test_df) <- c("PC1", "PC2", "Species")
set.seed(1234)
tree1 <- tree(Species~., data=train_df)
plot(tree1)
text(tree1, cex=0.5, pretty=0)
pred <- predict(tree1, newdata=test_df, type="class")
mean(pred==test$Species)
# Chunk 5
lda1 <- lda(Species~., data=train)
lda1$means
lda1 <- lda(Species~., data=train)
lda1$means
lda1 <- lda(Species~., data=train)
library(MASS)
lda1 <- lda(Species~., data=train)
lda1$means
lda_pred <- predict(lda1, newdata=test)
lda_pred$class
mean(lda_pred==test$Species)
length(test$Species)
length(lda_pred)
lda_pred <- predict(lda1, newdata=test, type="class")
lda_pred$class
mean(lda_pred==test$Species)
dim(lda_pred)
lda_pred
lda_pred$class
lda_pred <- predict(lda1, newdata=test, type="class")
lda_pred$class
mean(lda_pred$class==test$Species)
lda_pred$x
lda_pred$x[1]
lda_pred$x[,1]
plot(lda_pred$x[,1], lda_pred$x[,1],, col=c("red","green","blue")[unclass(test_pc$Species)])
plot(lda_pred$x[,1], lda_pred$x[,2], col=c("red","green","blue")[unclass(test_pc$Species)])
?lda()
lda1$means
lda_pred <- predict(lda1, newdata=test, type="class")
lda_pred$class
mean(lda_pred$class==test$Species)
plot(lda_pred$x[,1], lda_pred$x[,2], col=c("red","green","blue")[unclass(test_pc$Species)])
plot(lda_pred$x[,1], lda_pred$x[,2], pch=21, col=c("red","green","blue")[unclass(test_pc$Species)])
plot(lda_pred$x[,1], lda_pred$x[,2], pch=21, col=c("red","green","blue")[unclass(test_pc$Species)])
plot(lda_pred$x[,1], lda_pred$x[,2], pch=c(21,22,23)[unclass(lsa_pred$class)] col=c("red","green","blue")[unclass(test_pc$Species)])
plot(lda_pred$x[,1], lda_pred$x[,2], pch=c(21,22,23)[unclass(lda_pred$class)] col=c("red","green","blue")[unclass(test_pc$Species)])
plot(lda_pred$x[,1], lda_pred$x[,2], pch=c(21,22,23)[unclass(lda_pred$class)], col=c("red","green","blue")[unclass(test_pc$Species)])
plot(lda_pred$x[,1], lda_pred$x[,2], pch=c(21,22,23)[unclass(lda_pred$class)], bg=c("red","green","blue")[unclass(test_pc$Species)])
test_pc$class
test_pc$Species
train_pc <- predict(pca_out, train[, 1:4])
test_pc <- predict(pca_out, test[,])
plot(test_pc$PC1, test_pc$PC2, pch=c(21,22,23)[unclass(test_pc$Species)], bg=c("red","green","blue")[unclass(test_pc$Species)])
train_pc <- predict(pca_out, train[, 1:4])
test_pc <- predict(pca_out, test[,])
plot(test_pc$PC1, test_pc$PC2, pch=c(21,22,23)[unclass(test_pc$Species)], bg=c("red","green","blue")[unclass(test$Species)])
train_pc <- predict(pca_out, train[, 1:4])
test_pc <- predict(pca_out, test[,])
plot(test_pc$PC1, test_pc$PC2, pch=c(21,22,23)[unclass(test_pc$Species)], bg=c("red","green","blue")[unclass(test$Species)])
train_pc <- predict(pca_out, train[, 1:4])
test_pc <- predict(pca_out, test[,])
plot(test_pc$PC1, test_pc$PC2, pch=c(21,22,23)[unclass(test_pc$Species)], bg=c("red","green","blue")[unclass(test$Species)])
train_pc <- predict(pca_out, train[, 1:4])
test_pc <- predict(pca_out, test[,])
plot(test_pc$PC1, test_pc$PC2, pch=c(21,23,22)[unclass(test_pc$Species)], bg=c("red","green","blue")[unclass(test$Species)])
train_pc <- predict(pca_out, train[, 1:4])
test_pc <- predict(pca_out, test[,])
plot(test_pc$PC1, test_pc$PC2, pch=c(23,21,22)[unclass(test_pc$Species)], bg=c("red","green","blue")[unclass(test$Species)])
plot(lda_pred$x[,1], lda_pred$x[,2], pch=c(23,21,22)[unclass(lda_pred$class)], bg=c("red","green","blue")[unclass(test_pc$Species)])
library(flexclust)
data(nutrient)
head(nutrient)
nutrient.scaled <- scale(nutrient)
head(nutrient.scaled)
d <- dist(nutrient.scaled)
fit.average <- hclust(d, method="average")
plot(fit.average, hang=-1, cex=.8,
main="Hierarchical Clustering")
library(NbClust)
library(NbClust)
for (c in 3:7){
cluster_cut <- cutree(fit.average, c)
table_cut <- table(cluster_cut, df$Type)
print(table_cut)
ri <- randIndex(table_cut)
print(paste("cut=", c, "Rand index = ", ri))
}
str(d)
head(d)
names(d)
head(nutrient)
library(NbClust)
for (c in 3:7){
cluster_cut <- cutree(fit.average, c)
table_cut <- table(cluster_cut, nutrient$energy)
print(table_cut)
ri <- randIndex(table_cut)
print(paste("cut=", c, "Rand index = ", ri))
}
library(NbClust)
for (c in 3:7){
cluster_cut <- cutree(fit.average, c)
table_cut <- table(cluster_cut, nutrient$protein)
print(table_cut)
ri <- randIndex(table_cut)
print(paste("cut=", c, "Rand index = ", ri))
}
head(nutrient)
library(NbClust)
for (c in 3:7){
cluster_cut <- cutree(fit.average, c)
table_cut <- table(cluster_cut, nutrient$fat)
print(table_cut)
ri <- randIndex(table_cut)
print(paste("cut=", c, "Rand index = ", ri))
}
head(nutrient)
library(NbClust)
for (c in 3:7){
cluster_cut <- cutree(fit.average, c)
table_cut <- table(cluster_cut, nutrient$calcium)
print(table_cut)
ri <- randIndex(table_cut)
print(paste("cut=", c, "Rand index = ", ri))
}
table_cut <- table(cluster_cut, nutrient$iron)
library(NbClust)
for (c in 3:7){
cluster_cut <- cutree(fit.average, c)
table_cut <- table(cluster_cut, nutrient$iron)
print(table_cut)
ri <- randIndex(table_cut)
print(paste("cut=", c, "Rand index = ", ri))
}
library(flexclust)
data(nutrient)
library(flexclust)
data(nutrient)
head(nutrient)
nutrient.scaled <- scale(nutrient)
head(nutrient.scaled)
d <- dist(nutrient.scaled)
fit.average <- hclust(d, method="average")
plot(fit.average, hang=-1, cex=.8,
main="Hierarchical Clustering")
library(NbClust)
for (c in 3:7){
cluster_cut <- cutree(fit.average, c)
table_cut <- table(cluster_cut, nutrient$iron)
print(table_cut)
ri <- randIndex(table_cut)
print(paste("cut=", c, "Rand index = ", ri))
}
head(nutrient)
library(NbClust)
for (c in 3:7){
cluster_cut <- cutree(fit.average, c)
table_cut <- table(cluster_cut, nutrient$calcium)
print(table_cut)
ri <- randIndex(table_cut)
print(paste("cut=", c, "Rand index = ", ri))
}
nutrient
library(NbClust)
nutrient$Type <- "BEEF"
nutrient$Type[6, 7] <- "CHICKEN"
nutrient$Type[9, 10] <- "LAMB"
nutrient$Type[16:27] <- "SEAFOOD"
nutrient$Type[11:13] <- "PORK"
nutrient$Type <- factor(nutrient$Type)
nutrient$Type[6:7] <- "CHICKEN"
library(NbClust)
nutrient$Type <- "BEEF"
nutrient$Type[6:7] <- "CHICKEN"
nutrient$Type[9:10] <- "LAMB"
nutrient$Type[16:27] <- "SEAFOOD"
nutrient$Type[11:13] <- "PORK"
nutrient$Type <- factor(nutrient$Type)
nutrient
library(NbClust)
for (c in 3:7){
cluster_cut <- cutree(fit.average, c)
table_cut <- table(cluster_cut, nutrient$Type)
print(table_cut)
ri <- randIndex(table_cut)
print(paste("cut=", c, "Rand index = ", ri))
}
for (c in 3:11){
cluster_cut <- cutree(fit.average, c)
table_cut <- table(cluster_cut, nutrient$Type)
print(table_cut)
ri <- randIndex(table_cut)
print(paste("cut=", c, "Rand index = ", ri))
}
for (c in 3:11){
cluster_cut <- cutree(fit.average, c)
table_cut <- table(cluster_cut, nutrient$Type)
print(table_cut)
ri <- randIndex(table_cut)
print(paste("cut=", c, "Rand index = ", ri))
}
for (c in 3:11){
cluster_cut <- cutree(fit.average, c)
table_cut <- table(cluster_cut, nutrient$calcium)
print(table_cut)
ri <- randIndex(table_cut)
print(paste("cut=", c, "Rand index = ", ri))
}
for (c in 3:15){
cluster_cut <- cutree(fit.average, c)
table_cut <- table(cluster_cut, nutrient$calcium)
print(table_cut)
ri <- randIndex(table_cut)
print(paste("cut=", c, "Rand index = ", ri))
}
for (c in 3:16){
cluster_cut <- cutree(fit.average, c)
table_cut <- table(cluster_cut, nutrient$calcium)
print(table_cut)
ri <- randIndex(table_cut)
print(paste("cut=", c, "Rand index = ", ri))
}
?cutree
cluster_cut
is.list(cluster_cut)
class(cluster_cut)
is.vector(cluster_cut)
is.atomic(cluster_cut)
cluster_cut[1]
cluster_cut[[1]]
is.matrix(cluster_cut)
cc <- cutree(fit.average, 3)
cc
length(cc)
print(cc)
?randIndex
library(tree)
library(MASS)
names(Boston)
# divide into train and test
set.seed(1234)
i <- sample(nrow(Boston), 0.8*nrow(Boston), replace = FALSE)
train <- Boston[i,]
test <- Boston[-i,]
lm1 <- lm(medv~., data=train)
summary(lm1)
pred <- predict(lm1, newdata=test)
cor(pred, test$medv)
rmse <- sqrt(mean((pred-test$medv)^2))
tree1 <- tree(medv~., data=train)
summary(tree1)
pred <- predict(tree1, newdata=test)
cor(pred, test$medv)
rmse <- sqrt(mean((pred-test$medv)^2))
plot(tree1)
text(tree1, cex=0.5, pretty=0)
library(tree)
library(MASS)
names(Boston)
# divide into train and test
set.seed(1234)
i <- sample(nrow(Boston), 0.8*nrow(Boston), replace = FALSE)
train <- Boston[i,]
test <- Boston[-i,]
lm1 <- lm(medv~., data=train)
summary(lm1)
pred <- predict(lm1, newdata=test)
cor(pred, test$medv)
rmse_lm <- sqrt(mean((pred-test$medv)^2))
tree1 <- tree(medv~., data=train)
summary(tree1)
pred <- predict(tree1, newdata=test)
cor(pred, test$medv)
rmse_tree <- sqrt(mean((pred-test$medv)^2))
plot(tree1)
text(tree1, cex=0.5, pretty=0)
rm(rmse)
cv_tree <- cv.tree(tree1)
plot(cv_tree$size, cv_tree$dev, type='b')
tree_pruned <- prune.tree(tree1, best=5)
plot(tree_pruned)
text(tree_pruned, pretty=0)
pred_pruned <- predict(tree_pruned, newdata=test)
cor(pred_pruned, test$medv)
rmse_pruned <- sqrt(mean((pred_pruned-test$medv)^2))
library(randomForest)
set.seed(1234)
tree_bagged <- randomForest(medv~., data=train, importance=TRUE)
tree_bagged
pred_bag <- predict(tree_bagged, newdata=test)
cor(pred_bag, test$medv)
rmse_bag <- sqrt(mean((pred_bag-test$medv)^2))
tree_forest <- randomForest(medv~., data=train)
tree_forest
pred_forest <- predict(tree_forest, newdata=test)
cor(pred_forest, test$medv)
rmse_rforest <- sqrt(mean((pred_forest-test$medv)^2))
rm(list=ls())
library(tree)
library(MASS)
names(Boston)
# divide into train and test
set.seed(1234)
i <- sample(nrow(Boston), 0.8*nrow(Boston), replace = FALSE)
train <- Boston[i,]
test <- Boston[-i,]
lm1 <- lm(medv~., data=train)
summary(lm1)
pred <- predict(lm1, newdata=test)
cor(pred, test$medv)
rmse_lm <- sqrt(mean((pred-test$medv)^2))
tree1 <- tree(medv~., data=train)
summary(tree1)
pred <- predict(tree1, newdata=test)
cor(pred, test$medv)
rmse_tree <- sqrt(mean((pred-test$medv)^2))
plot(tree1)
text(tree1, cex=0.5, pretty=0)
tree1
cv_tree <- cv.tree(tree1)
plot(cv_tree$size, cv_tree$dev, type='b')
tree_pruned <- prune.tree(tree1, best=5)
plot(tree_pruned)
text(tree_pruned, pretty=0)
pred_pruned <- predict(tree_pruned, newdata=test)
cor(pred_pruned, test$medv)
rmse_pruned <- sqrt(mean((pred_pruned-test$medv)^2))
library(randomForest)
set.seed(1234)
tree_bagged <- randomForest(medv~., data=train, importance=TRUE)
tree_bagged
pred_bag <- predict(tree_bagged, newdata=test)
cor(pred_bag, test$medv)
rmse_bag <- sqrt(mean((pred_bag-test$medv)^2))
tree_forest <- randomForest(medv~., data=train)
tree_forest
pred_forest <- predict(tree_forest, newdata=test)
cor(pred_forest, test$medv)
rmse_rforest <- sqrt(mean((pred_forest-test$medv)^2))
print(data.frame(pred, test$medv))
temp_df <- data.frame(pred, test$medv)
head(temp_df)
