nrow(df[df$pclass==pc & df$survived==sv,]) / count_survived[as.integer(sv)+1]
}
}
# likelihood for sex
lh_sex <- matrix(rep(0,4), ncol=2)
for (sv in c("0", "1")){
for (sx in c(2, 3)) {
lh_sex[as.integer(sv)+1, sx-1] <-
nrow(df[as.integer(df$sex)==sx & df$survived==sv,]) /
count_survived[as.integer(sv)+1]
}
}
print("Likelihood values for p(pclass|survived):")
lh_pclass
print("Likelihood values for p(sex|survived):")
lh_sex
# get survived counts for no and yes
count_survived <- c(
length(df$survived[df$survived=="0"]),
length(df$survived[df$survived=="1"])
)
# likelihood for pclass
lh_pclass <- matrix(rep(0,6), ncol=3)
for (sv in c("0", "1")){
for (pc in c("1","2","3")) {
lh_pclass[as.integer(sv)+1, as.integer(pc)] <-
nrow(df[df$pclass==pc & df$survived==sv,]) / count_survived[as.integer(sv)+1]
}
}
# likelihood for sex
lh_sex <- matrix(rep(0,4), ncol=2)
for (sv in c("0", "1")){
for (sx in c(1, 2)) {
lh_sex[as.integer(sv)+1, sx-1] <-
nrow(df[as.integer(df$sex)==sx & df$survived==sv,]) /
count_survived[as.integer(sv)+1]
}
}
print("Likelihood values for p(sex|survived):")
lh_sex
# get survived counts for no and yes
count_survived <- c(
length(df$survived[df$survived=="0"]),
length(df$survived[df$survived=="1"])
)
# likelihood for pclass
lh_pclass <- matrix(rep(0,6), ncol=3)
for (sv in c("0", "1")){
for (pc in c("1","2","3")) {
lh_pclass[as.integer(sv)+1, as.integer(pc)] <-
nrow(df[df$pclass==pc & df$survived==sv,]) / count_survived[as.integer(sv)+1]
}
}
# likelihood for sex
lh_sex <- matrix(rep(0,4), ncol=2)
for (sv in c("0", "1")){
for (sx in c(1, 2)) {
lh_sex[as.integer(sv)+1, sx] <-
nrow(df[as.integer(df$sex)==sx & df$survived==sv,]) /
count_survived[as.integer(sv)+1]
}
}
print("Likelihood values for p(sex|survived):")
lh_sex
calc_raw_prob <- function(pclass, sex, age) {
# pclass=1,2,3  sex=2-female,3=male   age=numeric
numerator_survived <- lh_pclass[2, pclass] * lh_sex[sex, 2] * apriori[2] *
calc_age_lh(age, age_mean[2], age_var[2])
print(paste("Hello", sex, lh_sex[sex, 2]))
numerator_perished <- lh_pclass[1, pclass] * lh_sex[sex, 1] * apriori[1] *
calc_age_lh(age, age_mean[1], age_var[1])
denominator <- lh_pclass[2, 1]  * lh_sex[2, 1] * calc_age_lh(age, age_mean[2], age_var[2]) * apriori[2] +
lh_pclass[1,1]  * lh_sex[1,1] * calc_age_lh(age, age_mean[1], age_var[1]) * apriori[1]
return (list(prob_survived <- numerator_survived / denominator, prob_perished <- numerator_perished / denominator))
}
for (i in 1:5){
raw <- calc_raw_prob(test[i,1], as.integer(test[i,3]), test[i,4])
print(paste(raw[2], raw[1]))
}
pred[1:5,]
calc_raw_prob <- function(pclass, sex, age) {
# pclass=1,2,3  sex=2-female,3=male   age=numeric
numerator_survived <- lh_pclass[2, pclass] * lh_sex[sex, 2] * apriori[2] *
calc_age_lh(age, age_mean[2], age_var[2])
print(paste("Hello", sex, lh_sex[sex, 2]))
numerator_perished <- lh_pclass[1, pclass] * lh_sex[sex, 1] * apriori[1] *
calc_age_lh(age, age_mean[1], age_var[1])
denominator <- lh_pclass[2, 1]  * lh_sex[1, 2] * calc_age_lh(age, age_mean[2], age_var[2]) * apriori[2] +
lh_pclass[1,1]  * lh_sex[2,1] * calc_age_lh(age, age_mean[1], age_var[1]) * apriori[1]
return (list(prob_survived <- numerator_survived / denominator, prob_perished <- numerator_perished / denominator))
}
for (i in 1:5){
raw <- calc_raw_prob(test[i,1], as.integer(test[i,3]), test[i,4])
print(paste(raw[2], raw[1]))
}
pred[1:5,]
lh_sex
lh_pclass
calc_raw_prob <- function(pclass, sex, age) {
# pclass=1,2,3  sex=2-female,3=male   age=numeric
numerator_survived <- lh_pclass[2, pclass] * lh_sex[sex, 2] * apriori[2] *
calc_age_lh(age, age_mean[2], age_var[2])
numerator_perished <- lh_pclass[1, pclass] * lh_sex[sex, 1] * apriori[1] *
calc_age_lh(age, age_mean[1], age_var[1])
denominator <- lh_pclass[2, pclass]  * lh_sex[sex, 2] * calc_age_lh(age, age_mean[2], age_var[2]) * apriori[2] +
lh_pclass[1, pclass]  * lh_sex[sex, 1] * calc_age_lh(age, age_mean[1], age_var[1]) * apriori[1]
return (list(prob_survived <- numerator_survived / denominator, prob_perished <- numerator_perished / denominator))
}
for (i in 1:5){
raw <- calc_raw_prob(test[i,1], as.integer(test[i,3]), test[i,4])
print(paste(raw[2], raw[1]))
}
pred[1:5,]
lh_pclass
lh_sex
nb1
df <- read.csv("data/titanic3.csv", header=TRUE, stringsAsFactors = FALSE)
# subset to just columns survived, pclass, sex, and age
df <- df[,c(1,2,4,5)]
# pclass and survived  and sex should be factors
df$pclass <- factor(df$pclass)
df$survived <- factor(df$survived)
df$sex <- factor(df$sex, levels=c("female", "male"))
# remove NAs
df <- df[!is.na(df$pclass),]
df <- df[!is.na(df$survived),]
df$age[is.na(df$age)] <- median(df$age,na.rm=T)
# divide into train and test
set.seed(1234)
i <- sample(1:nrow(df), 0.75*nrow(df), replace=FALSE)
train <- df[i,]
test <- df[-i,]
# perform Naive Bayes
library(e1071)
nb1 <- naiveBayes(df[,-2], df[,2], data=train)
pred <- predict(nb1, newdata=test[,-2], type="raw")
# look at first 5 (actual: 0 1 1 1 0)
pred[1:5,]
for (i in 1:5){
raw <- calc_raw_prob(test[i,1], as.integer(test[i,3]), test[i,4])
print(paste(raw[2], raw[1]))
}
pred[1:5,]
lh_pclass
lh_sex
calc_raw_prob <- function(pclass, sex, age) {
# pclass=1,2,3  sex=2-female,3=male   age=numeric
numerator_survived <- lh_pclass[2, pclass] * lh_sex[2, sex] * apriori[2] *
calc_age_lh(age, age_mean[2], age_var[2])
numerator_perished <- lh_pclass[1, pclass] * lh_sex[1, sex] * apriori[1] *
calc_age_lh(age, age_mean[1], age_var[1])
denominator <- lh_pclass[2, pclass]  * lh_sex[2, sex] * calc_age_lh(age, age_mean[2], age_var[2]) * apriori[2] +
lh_pclass[1, pclass]  * lh_sex[1, sex] * calc_age_lh(age, age_mean[1], age_var[1]) * apriori[1]
return (list(prob_survived <- numerator_survived / denominator, prob_perished <- numerator_perished / denominator))
}
for (i in 1:5){
raw <- calc_raw_prob(test[i,1], as.integer(test[i,3]), test[i,4])
print(paste(raw[2], raw[1]))
}
pred[1:5,]
calc_raw_prob <- function(pclass, sex, age) {
# pclass=1,2,3  sex=2-female,3=male   age=numeric
num_s <- lh_pclass[2, pclass] * lh_sex[2, sex] * apriori[2] *
calc_age_lh(age, age_mean[2], age_var[2])
num_p <- lh_pclass[1, pclass] * lh_sex[1, sex] * apriori[1] *
calc_age_lh(age, age_mean[1], age_var[1])
denominator <- lh_pclass[2, pclass]  * lh_sex[2, sex] * calc_age_lh(age, age_mean[2], age_var[2]) * apriori[2] +
lh_pclass[1, pclass]  * lh_sex[1, sex] * calc_age_lh(age, age_mean[1], age_var[1]) * apriori[1]
return (list(prob_survived <- num_s / denominator, prob_perished <- num_p / denominator))
}
for (i in 1:5){
raw <- calc_raw_prob(test[i,1], as.integer(test[i,3]), test[i,4])
print(paste(raw[2], raw[1]))
}
pred[1:5,]
data(women)
str(women)
plot(women$weight~women$height)
data(women)
str(women)
plot(women$weight~women$height)
abline(lm(women$weight~women$height), col="red")
attach(women)
cor(height, weight)
cov(height, weight)
cov(height, weight) / (sd(x) * sd(y))
cov(height, weight) / (sd(weight) * sd(height))
help(summary, lm)
help(summary, lm.fit()
)
lm1 <- lm(weight~height, data=women)
lm1
lm1$residuals
data()
head(AirPassengers)
head(InsectSprays)
head(UKgas)
head(USArrests)
lm2 <- lm(USArrests$Murder ~ USArrests$UrbanPop)
lm2
lm2 <- lm(USArrests$Assault ~ USArrests$UrbanPop)
lm2
lm2 <- lm(USArrests$Rape ~ USArrests$UrbanPop)
llm2
lm2
head(WWWusage)
head(USAccDeaths)
head(airquality)
lm2 <- lm(airquality$Ozone ~ airquality$Temp)
lm2
summary(lm2)
head(discoveries)
head(sleep)
head(swiss)
lm2 <- lm(swiss$Fertility~swiss$Education)
summary(lm2)
?swiss
pairs(swiss)
?swiss
pairs(swiss)
dim(swiss)
swiss
data(women)
str(women)
plot(women$weight~women$height)
abline(lm(women$weight~women$height), col="red")
?women
lm1 <- lm(weight~height, data=women)
lm1
data(women)
str(women)
plot(women$weight~women$height)
abline(lm(women$weight~women$height), col="red")
lm1 <- lm(weight~height, data=women)
lm1
attach(women)
lm1 <- lm(women$weight~women$height, data=women)
lm1
?abline
summary(lm1)
summary(women)
cor(weight, height)
cor(height, weights)
cor(height, weight)
cov(height, weight)
test <- women[c(5, 9, 11),]
test[1, 2] <- 135
test[2, 2] <- 118
test[3, 2] <- 156
test
pred <- predict(lm1, newdata=test)
test <- women[c(5, 9, 11),]
test[1, 2] <- 135
test[2, 2] <- 118
test[3, 2] <- 156
test
pred <- predict(lm1, newdata=test)
pred
data(women)
str(women)
plot(women$weight~women$height)
abline(lm(women$weight~women$height), col="red")
attach(women)
lm1 <- lm(women$weight~women$height, data=women)
lm1
summary(lm1)
test <- women[c(5, 9, 11),]
test[1, 2] <- 135
test[2, 2] <- 118
test[3, 2] <- 156
test
pred <- predict(lm1, newdata=test)
correlation <- cor(pred, test$weight)
test <- women[c(5, 9, 11),]
str(test)
test[1, 2] <- 135
test[2, 2] <- 118
test[3, 2] <- 156
test
str(test)
test
test <- women[c(5, 9, 11),]
test[1, 2] <- 135
test[2, 2] <- 118
test[3, 2] <- 156
test
pred <- predict(lm1, newdata=test)
data(ChickWeight)
str(ChickWeight)
head(ChickWeight)
par(mfrow=c(1,2))
plot(ChickWeight$Time, ChickWeight$weight,
xlab="Time", ylab="Weight")
plot(ChickWeight$Diet, ChickWeight$weight,
xlab="Diet", ylab="Weight")
set.seed(1234)
i <- sample(1:nrow(ChickWeight), nrow(ChickWeight)*0.75, replace=FALSE)
train <- ChickWeight[i,]
test <- ChickWeight[-i,]
lm1 <- lm(weight~Time, data=train)
summary(lm1)
par(mfrow=c(2,2))
plot(lm1)
lm2 <- lm(weight~Time+Diet, data=train)
summary(lm2)
anova(lm1, lm2)
lm3 <- lm(log(weight)~Time+Diet, data=ChickWeight)
summary(lm3)
par(mfrow=c(2,2))
plot(lm3)
data(ChickWeight)
str(ChickWeight)
?ChickWeight
attach(ChickWeight)
levels(Diet)
contrasts(Diet)
head(ChickWeight)
par(mfrow=c(1,2))
plot(ChickWeight$Time, ChickWeight$weight,
xlab="Time", ylab="Weight")
plot(ChickWeight$Diet, ChickWeight$weight,
xlab="Diet", ylab="Weight")
set.seed(1234)
i <- sample(1:nrow(ChickWeight), nrow(ChickWeight)*0.75, replace=FALSE)
i
train <- ChickWeight[i,]
test <- ChickWeight[-i,]
lm1 <- lm(weight~Time, data=train)
summary(lm1)
par(mfrow=c(2,2))
plot(lm1)
lm2 <- lm(weight~Time+Diet, data=train)
summary(lm2)
anova(lm1, lm2)
lm3 <- lm(log(weight)~Time+Diet, data=ChickWeight)
summary(lm3)
par(mfrow=c(2,2))
plot(lm3)
anova(lm1, lm2, lm3)
pred <- predict(lm1, newdata=test)
head(pred)
cor(pred, test$weight)
mse <- mean((pred-test$weight)^2)
rmse <- sqrt(mse)
pred <- predict(lm2, newdata=test)
cor(pred, test$weight)
mse2 <- mean((pred-test$weight)^2)
rmse2 <- sqrt(mse)
rmse2 <- sqrt(mse2)
pred <- predict(lm3, newdata=test)
cor(pred, test$weight)
mse3 <- mean((pred-test$weight)^2)
rmse3 <- sqrt(mse3)
pred <- predict(lm3, newdata=test)
cor(pred, log(test$weight))
mse3 <- mean((pred-log(test$weight))^2)
rmse3 <- sqrt(mse3)
mse3 <- mean((pred-log(test$weight))^2)
rmse3 <- sqrt(mse3)
library(ISLR)
data(women)
str(women)
plot(women$weight~women$height)
abline(lm(women$weight~women$height), col="red")
attach(women)
lm1 <- lm(women$weight~women$height, data=women)
lm1
summary(lm1)
test <- women[c(5, 9, 11),]
test[1, 2] <- 135
test[2, 2] <- 118
test[3, 2] <- 156
test
pred <- predict(lm1, newdata=test)
str(test)
pred <- predict(lm1, data=test)
correlation <- cor(pred, test$weight)
length(pred)
lm1 <- lm(weight~height, data=women)
lm1
summary(lm1)
test <- women[c(5, 9, 11),]
test[1, 2] <- 135
test[2, 2] <- 118
test[3, 2] <- 156
test
pred <- predict(lm1, newdata=test)
correlation <- cor(pred, test$weight)
print(paste("correlation: ", correlation))
mse <- mean((pred - test$weight)^2)
print(paste("mse: ", mse))
rmse <- sqrt(mse)
print(paste("rmse: ", rmse))
plot(women$height, women$weight, main="Women's Height and Weight",
xlab="height", ylab="weight")
abline(lm1)
points(test$height, test$weight, pch=0)
segments(test$height, test$weight, test$height, pred, col="red")
x <- women$height
y <- women$weight
x_mean <- mean(women$height)
y_mean <- mean(women$weight)
w_hat <- sum((x-x_mean)*(y-y_mean)) / sum((x-x_mean)^2)
b_hat <- y_mean - w_hat * x_mean
print(paste("w and b estimates = ", w_hat, b_hat))
data(ChickWeight)
str(ChickWeight)
head(ChickWeight)
par(mfrow=c(1,2))
plot(ChickWeight$Time, ChickWeight$weight,
xlab="Time", ylab="Weight")
plot(ChickWeight$Diet, ChickWeight$weight,
xlab="Diet", ylab="Weight")
set.seed(1234)
i <- sample(1:nrow(ChickWeight), nrow(ChickWeight)*0.75, replace=FALSE)
train <- ChickWeight[i,]
test <- ChickWeight[-i,]
lm1 <- lm(weight~Time, data=train)
summary(lm1)
lm2 <- lm(weight~Time+Diet, data=train)
summary(lm2)
anova(lm1, lm2)
lm3 <- lm(log(weight)~Time+Diet, data=ChickWeight)
summary(lm3)
par(mfrow=c(2,2))
plot(lm3)
pred <- predict(lm1, newdata=test)
cor(pred, test$weight)
mse <- mean((pred-test$weight)^2)
rmse <- sqrt(mse)
pred <- predict(lm2, newdata=test)
cor(pred, test$weight)
mse2 <- mean((pred-test$weight)^2)
rmse2 <- sqrt(mse2)
pred <- predict(lm2, newdata=test)
cor(pred, test$weight)
mse2 <- mean((pred-test$weight)^2)
rmse2 <- sqrt(mse2)
pred <- predict(lm3, newdata=test)
cor(pred, log(test$weight))
mse3 <- mean((pred-log(test$weight))^2)
rmse3 <- sqrt(mse3)
df <- read.csv("data/titanic3.csv", header=TRUE)
str(df)
df <- df[,c(1,2,4,5)]
df$pclass <- factor(df$pclass)
df$survived <- factor(df$survived)
head(df)
sapply(df, function(x) sum(is.na(x)==TRUE))
df <- df[!is.na(df$pclass),]
df <- df[!is.na(df$survived),]
df$age[is.na(df$age)] <- median(df$age,na.rm=T)
set.seed(1234)
i <- sample(1:nrow(df), 0.75*nrow(df), replace=FALSE)
train <- df[i,]
test <- df[-i,]
glm1 <- glm(survived~., data=train, family="binomial")
summary(glm1)
probs <- predict(glm1, newdata=test, type="response")
pred <- ifelse(probs>0.5, 1, 0)
acc <- mean(pred==test$survived)
print(paste("accuracy = ", acc))
table(pred, test$survived)
library(caret)
confusionMatrix(pred, reference=test$survived)
names(df)
summary(glm1)
confusionMatrix(pred, reference=test$survived)
library(ROCR)
p <- predict(glm1, newdata=test, type="response")
pr <- prediction(p, test$survived)
# TPR = sensitivity, FPR=specificity
prf <- performance(pr, measure = "tpr", x.measure = "fpr")
plot(prf)
auc <- performance(pr, measure = "auc")
auc <- auc@y.values[[1]]
auc
?cut()
?cumsum()
library(mlbench)
data(BreastCancer)
str(BreastCancer)
summary(BreastCancer$Class)
set.seed(1234)
df <- BreastCancer[,-1] # remove ID
i <- sample(1:nrow(df), 0.8*nrow(df), replace=FALSE)
train <- df[i,]
test <- df[-i,]
glm1 <- glm(Class~., data=train, family=binomial)
summary(glm1)
probs1 <- predict(glm1, newdata=test, type="response")
pred1 <- ifelse(probs1>0.5, 2, 1)
table(pred1, test$Class)
acc1 <- mean(pred1==as.integer(test$Class), na.rm=TRUE)
acc1
library(caret)
confusionMatrix(pred1, as.integer(test$Class), positive="1")
library(e1071)
nb1 <- naiveBayes(train[,-10], train[,10])
summary(nb1)
pred2 <- predict(nb1, newdata=test[,-10], type="class")
table(pred2, test$Class)
acc2 <- mean(pred2==test$Class)
acc2
confusionMatrix(pred2, test$Class, positive="benign")
df <- airquality[]
str(df)
df <- complete.cases(df)
df
df <- airquality[]
df <- df[complete.cases(df),]
str(df)
